import Head from 'next/head'
import { useState, useEffect } from 'react'

const url = 'https://api.data.gov.sg/v1/transport/carpark-availability';

export default function Home() {
  const [data, setData] = useState(null)
  const [isLoading, setLoading] = useState(false)

  useEffect(() => {
    const fetchData = () => {
      setLoading(true)
      fetch(url)
        .then((res) => res.json())
        .then((data) => {
          let carparkDetails = data.items[0].carpark_data;
          let allCarparkSmall = [];
          let allCarparkMedium = [];
          let allCarparkBig = [];
          let allCarparkLarge = [];
          for (let detail of carparkDetails) {
            // Merge if same carpark have multiple lot_type
            detail.sum_lot = 0;
            detail.available_lot = 0;
            detail.carpark_info.forEach(element => {
              detail.sum_lot += +element.total_lots;
              detail.available_lot += +element.lots_available;
            });

            if (detail.sum_lot < 100) {
              allCarparkSmall.push(detail)
            }
            else if (detail.sum_lot < 300) {
              allCarparkMedium.push(detail)
            }
            else if (detail.sum_lot < 400) {
              allCarparkBig.push(detail)
            }
            else {
              allCarparkLarge.push(detail)
            }
          }

          const minAvailableSmall = Math.min(...allCarparkSmall.map(item => item.available_lot));
          const maxAvailableSmall = Math.max(...allCarparkSmall.map(item => item.available_lot));
          const getMinAvailableSmall = allCarparkSmall.filter(function (item) { return item.available_lot === minAvailableSmall; });
          const getMaxAvailableSmall = allCarparkSmall.filter(function (item) { return item.available_lot === maxAvailableSmall; });

          const minAvailableMedium = Math.min(...allCarparkMedium.map(item => item.available_lot));
          const maxAvailableMedium = Math.max(...allCarparkMedium.map(item => item.available_lot));
          const getMinAvailableMedium = allCarparkMedium.filter(function (item) { return item.available_lot === minAvailableMedium; });
          const getMaxAvailableMedium = allCarparkMedium.filter(function (item) { return item.available_lot === maxAvailableMedium; });

          const minAvailableBig = Math.min(...allCarparkBig.map(item => item.available_lot));
          const maxAvailableBig = Math.max(...allCarparkBig.map(item => item.available_lot));
          const getMinAvailableBig = allCarparkBig.filter(function (item) { return item.available_lot === minAvailableBig; });
          const getMaxAvailableBig = allCarparkBig.filter(function (item) { return item.available_lot === maxAvailableBig; });

          const minAvailableLarge = Math.min(...allCarparkLarge.map(item => item.available_lot));
          const maxAvailableLarge = Math.max(...allCarparkLarge.map(item => item.available_lot));
          const getMinAvailableLarge = allCarparkLarge.filter(function (item) { return item.available_lot === minAvailableLarge; });
          const getMaxAvailableLarge = allCarparkLarge.filter(function (item) { return item.available_lot === maxAvailableLarge; });


          const parkingCategoryData = {
            small: {
              highest_available: maxAvailableSmall,
              highest_lots: getMaxAvailableSmall.map((item) => item.carpark_number).join(', '),
              lowest_available: minAvailableSmall,
              lowest_lots: getMinAvailableSmall.map((item) => item.carpark_number).join(', '),
            },
            medium: {
              highest_available: maxAvailableMedium,
              highest_lots: getMaxAvailableMedium.map((item) => item.carpark_number).join(', '),
              lowest_available: minAvailableMedium,
              lowest_lots: getMinAvailableMedium.map((item) => item.carpark_number).join(', '),
            },
            big: {
              highest_available: maxAvailableBig,
              highest_lots: getMaxAvailableBig.map((item) => item.carpark_number).join(', '),
              lowest_available: minAvailableBig,
              lowest_lots: getMinAvailableBig.map((item) => item.carpark_number).join(', '),
            },
            large: {
              highest_available: maxAvailableLarge,
              highest_lots: getMaxAvailableLarge.map((item) => item.carpark_number).join(', '),
              lowest_available: minAvailableLarge,
              lowest_lots: getMinAvailableLarge.map((item) => item.carpark_number).join(', '),
            },
          }

          setData(parkingCategoryData)
          setLoading(false)
        })
    }
    
    setLoading(true);
    fetchData();

    const interval = setInterval(() => {
      fetchData()
    }, 60000)

    return () => clearInterval(interval)
  }, [])

  return (
    <div>
      <Head>
        <title>Qashier Parking API</title>
        <meta name="description" content="Generated by Shahrul" />
      </Head>

      <main className='py-20 px-10'>
        {
          isLoading && <p>Loading...</p>
        }
        {
          !isLoading && data &&
          <div>
            <p className='font-bold text-2xl'>Carpark Availability</p>
            <div className='grid grid-cols-4 p pt-4 gap-x-4 text-center'>
              {
                Object.keys(data).map(
                  (key, index) => {
                    return <div key={index} className='flex flex-col space-y-4 break-words'>
                      <p className='text-xl uppercase'>{key}</p>
                      <div>
                        <p className='font-bold'>Highest Lots</p>
                        <div className='grid grid-cols-2 space-x-4'>
                          <div className='border rounded-lg text-center'>
                            <p className='p-2 bg-slate-200'>Lot Number</p>
                            <p className='p-2'>{data[key].highest_lots}</p>
                          </div>
                          <div className='border rounded-lg text-center'>
                            <p className='p-2 bg-slate-200'>Available Lots</p>
                            <p className='p-2'>{data[key].highest_available}</p>
                          </div>
                        </div>
                      </div>
                      <div>
                        <p className='font-bold'>Lowest Lots</p>
                        <div className='grid grid-cols-2 space-x-4'>
                          <div className='border rounded-lg text-center'>
                            <p className='p-2 bg-slate-200'>Lot Number</p>
                            <p className='p-2'>{data[key].lowest_lots}</p>
                          </div>
                          <div className='border rounded-lg text-center'>
                            <p className='p-2 bg-slate-200'>Available Lots</p>
                            <p className='p-2'>{data[key].lowest_available}</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  }
                )
              }
            </div>
          </div>
        }
      </main>
    </div>
  )
}
